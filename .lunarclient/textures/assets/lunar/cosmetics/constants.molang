c.in_special_env = q.is_flying || q.is_swimming || q.is_in_water;

c.delta = math.abs(q.life_time - c.last_frame);
c.last_frame = q.life_time;

axis.x = 1;
axis.y = 2;
axis.z = 3;

c.abs_groundspeed = math.abs(query.local_z_velocity);
c.leg_ampl = math.min(c.abs_groundspeed,4)*15;
c.afk_timer = (!q.ground_speed && !q.y_velocity) ? c.afk_timer + (1 * c.delta) :0;

c.normalized_ground_speed = math.clamp(c.ground_speed_smoothed, 0, 6) / 6;
c.highspeed = (c.ground_speed_smoothed > 8);

c.tmul = 80;
c.ftmul = 256;

c.is_crouching_smoothed ?? q.is_crouching;
c.is_crouching_smoothed = math.lerp(c.is_crouching_smoothed, q.is_crouching, 0.05);

c.head_y_rotation_diff = c.last_head_y_rotation - q.head_y_rotation;
c.head_x_rotation_diff = c.last_head_x_rotation - q.head_x_rotation;
c.last_head_y_rotation = q.head_y_rotation;
c.last_head_x_rotation = q.head_x_rotation;

c.eye_look_x_position_offset = c.eye_look_x_position_offset + (c.head_y_rotation_diff / 45);
c.eye_look_x_position_offset = c.eye_look_x_position_offset * 0.8;

c.eye_look_y_position_offset = c.eye_look_y_position_offset + (c.head_x_rotation_diff / 45);
c.eye_look_y_position_offset = c.eye_look_y_position_offset * 0.8;

c.distance_moved ?? 0;
c.distance_moved = c.distance_moved + (math.abs(q.ground_speed) * c.delta);

c.ground_speed_smoothed ?? q.ground_speed;
c.ground_speed_smoothed = math.lerp(c.ground_speed_smoothed, q.ground_speed, 0.5);


c.is_moving = (q.ground_speed > 0.25);
c.is_moving_smoothed = (
   (q.ground_speed < 0.25)
      ? math.lerp(c.is_moving_smoothed ?? 0, 0, 0.05)
      : math.lerp(c.is_moving_smoothed ?? 0, 1, 0.05)
);

c.is_walking_smoothed = (
   (q.ground_speed < 2.85)
      ? math.lerp(c.is_walking_smoothed ?? 0, 0, 0.05)
      : math.lerp(c.is_walking_smoothed ?? 0, 1, 0.05)
);

c.is_swimming_smoothed = (
   q.is_swimming
      ? math.lerp(c.is_swimming_smoothed ?? 0, 1, 0.05)
      : math.lerp(c.is_swimming_smoothed ?? 0, 0, 0.05)
);

c.is_crouching_smoothed = (
   q.is_crouching
      ? math.lerp(c.is_crouching_smoothed ?? 0, 1, 0.05)
      : math.lerp(c.is_crouching_smoothed ?? 0, 0, 0.05)
);

c.is_moving_backwards_smoothed = (
   (q.local_z_velocity < -1)
      ? math.lerp(c.is_moving_backwards_smoothed ?? 0, 1, 0.08)
      : math.lerp(c.is_moving_backwards_smoothed ?? 0, 0, 0.08)
);

c.is_deep_underwater_smoothed = (
   (q.distance_from_surface < 2)
      ? math.lerp(c.is_deep_underwater_smoothed ?? 0, 1, 0.08)
      : math.lerp(c.is_deep_underwater_smoothed ?? 0, 0, 0.08)
);

c.distance_from_surface_smoothed ?? q.distance_from_surface;
c.distance_from_surface_smoothed = math.lerp(c.distance_from_surface_smoothed, q.distance_from_surface, 0.25);

readout.ground_speed = q.ground_speed;
readout.is_walking_smoothed = c.is_walking_smoothed;

c.local_x_velocity_smoothed ?? q.local_x_velocity;
c.local_x_velocity_smoothed = math.lerp(c.local_x_velocity_smoothed, q.local_x_velocity, 0.25);
c.lvs_x = c.local_x_velocity_smoothed;

c.local_y_velocity_smoothed ?? q.local_y_velocity;
c.local_y_velocity_smoothed = math.lerp(c.local_y_velocity_smoothed, q.local_y_velocity, 0.25);
c.lvs_y = c.local_y_velocity_smoothed;

c.local_z_velocity_smoothed ?? q.local_z_velocity;
c.local_z_velocity_smoothed = math.lerp(c.local_z_velocity_smoothed, q.local_z_velocity, 0.25);
c.lvs_z = c.local_z_velocity_smoothed;

c.local_x_velocity_smoothed4 ?? q.local_x_velocity;
c.local_x_velocity_smoothed4 = math.lerp(c.local_x_velocity_smoothed4, q.local_x_velocity, 0.125);

c.local_y_velocity_smoothed4 ?? q.local_y_velocity;
c.local_y_velocity_smoothed4 = math.lerp(c.local_y_velocity_smoothed4, q.local_y_velocity, 0.125);

c.local_z_velocity_smoothed4 ?? q.local_z_velocity;
c.local_z_velocity_smoothed4 = math.lerp(c.local_z_velocity_smoothed4, q.local_z_velocity, 0.125);

c.x_velocity_smoothed ?? q.x_velocity;
c.x_velocity_smoothed = math.lerp(c.x_velocity_smoothed, q.x_velocity, 0.125);

c.y_velocity_smoothed ?? q.y_velocity;
c.y_velocity_smoothed = math.lerp(c.y_velocity_smoothed, q.y_velocity, 0.125);

c.z_velocity_smoothed ?? q.z_velocity;
c.z_velocity_smoothed = math.lerp(c.z_velocity_smoothed, q.z_velocity, 0.125);

c.movement_speed_smoothed = math.sqrt(
   math.pow(c.local_x_velocity_smoothed, 2)
   + math.pow(c.local_y_velocity_smoothed, 2)
   + math.pow(c.local_z_velocity_smoothed, 2)
);
readout.movement_speed_smoothed = c.movement_speed_smoothed;

c.entity_y_rotation_smoothed ?? q.entity_y_rotation;
c.entity_y_rotation_smoothed = math.lerp(c.entity_y_rotation_smoothed, q.entity_y_rotation, 0.05);

c.entity_y_rotation_smoothed_diff = c.entity_y_rotation_smoothed - q.entity_y_rotation;
c.entity_y_rotation_smoothed_diff_smoothed ?? c.entity_y_rotation_smoothed_diff;
c.entity_y_rotation_smoothed_diff_smoothed = math.lerp(c.entity_y_rotation_smoothed_diff_smoothed, c.entity_y_rotation_smoothed_diff, 0.05);

c.nutcracker_anim_speed = (c.ground_speed_smoothed < 0.25) ? (256 + 128) : 90;